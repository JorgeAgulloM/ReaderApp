package com.practice.readerapp.navigationimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.runtime.Composableimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavTypeimport androidx.navigation.compose.NavHostimport androidx.navigation.compose.composableimport androidx.navigation.compose.rememberNavControllerimport androidx.navigation.navArgumentimport com.practice.readerapp.screens.ReaderSplashScreenimport com.practice.readerapp.screens.details.BookDetailsScreenimport com.practice.readerapp.screens.home.Homeimport com.practice.readerapp.screens.login.ReaderLoginScreenimport com.practice.readerapp.screens.search.BooksSearchViewModelimport com.practice.readerapp.screens.search.SearchScreenimport com.practice.readerapp.screens.stats.ReaderStatsScreenimport com.practice.readerapp.screens.update.BookUpdateScreen@OptIn(ExperimentalMaterial3Api::class)@Composablefun ReaderNavigation() {    val navController = rememberNavController()    NavHost(        navController = navController,        startDestination = ReaderScreens.SplashScreen.name    ) {        composable(ReaderScreens.SplashScreen.name) {            ReaderSplashScreen(navController = navController)        }        composable(ReaderScreens.LoginScreen.name) {            ReaderLoginScreen(navController = navController)        }        composable(ReaderScreens.ReaderHomeScreen.name) {            Home(navController = navController)        }        composable(ReaderScreens.ReaderStatsScreen.name) {            ReaderStatsScreen(navController = navController)        }        composable(ReaderScreens.SearchScreen.name) {            val searchViewModel = hiltViewModel<BooksSearchViewModel>()            SearchScreen(navController = navController, viewModel = searchViewModel)        }        val detailName = ReaderScreens.DetailScreen.name        composable(            "${detailName}/{bockId}",            arguments = listOf(navArgument("bookId") {                type = NavType.StringType            })        ) {backStackEntry ->            backStackEntry.arguments?.getString("bookId").let {                BookDetailsScreen(                    navController = navController,                    bookId = it.toString()                )            }        }        composable(ReaderScreens.UpdateScreen.name) {            BookUpdateScreen(navController = navController)        }    }}