package com.practice.readerapp.componentsimport android.annotation.SuppressLintimport androidx.compose.foundation.Imageimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardActionsimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.*import androidx.compose.material.icons.rounded.FavoriteBorderimport androidx.compose.material3.*import androidx.compose.runtime.Composableimport androidx.compose.runtime.MutableStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.draw.scaleimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.ImeActionimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.input.PasswordVisualTransformationimport androidx.compose.ui.text.input.VisualTransformationimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport coil.compose.rememberAsyncImagePainterimport com.google.firebase.auth.FirebaseAuthimport com.practice.readerapp.model.MBookimport com.practice.readerapp.navigation.ReaderScreensimport com.practice.readerapp.ui.theme.COLOR_APP_PRIMARY@Composablefun ReaderLogo(modifier: Modifier = Modifier) {    Text(        text = "Reader App",        modifier = modifier.padding(bottom = 8.dp),        style = MaterialTheme.typography.displayMedium,        color = COLOR_APP_PRIMARY    )}@Composablefun EmailInput(    modifier: Modifier = Modifier,    emailState: MutableState<String>,    labelId: String = "Email",    enabled: Boolean = true,    imeAction: ImeAction = ImeAction.Next,    onAction: KeyboardActions = KeyboardActions.Default) {    InputField(        modifier = modifier,        valueState = emailState,        labelId = labelId,        enabled = enabled,        keyboardType = KeyboardType.Email,        imeAction = imeAction,        onAction = onAction    )}@Composablefun InputField(    modifier: Modifier = Modifier,    valueState: MutableState<String>,    labelId: String,    enabled: Boolean,    isSingleLine: Boolean = true,    keyboardType: KeyboardType = KeyboardType.Text,    imeAction: ImeAction = ImeAction.Next,    onAction: KeyboardActions = KeyboardActions.Default) {    OutlinedTextField(        value = valueState.value,        onValueChange = { valueState.value = it },        label = { Text(text = labelId) },        singleLine = isSingleLine,        textStyle = TextStyle(            fontSize = 18.sp,            //color = MaterialTheme.colorScheme.onSurface        ),        modifier = modifier            .padding(bottom = 10.dp, start = 10.dp, end = 10.dp)            .fillMaxWidth(),        enabled = enabled,        keyboardOptions = KeyboardOptions(            keyboardType = keyboardType,            imeAction = imeAction        ),        keyboardActions = onAction    )}@Composablefun PasswordInput(    modifier: Modifier,    passwordState: MutableState<String>,    label: String,    enabled: Boolean,    passwordVisibility: MutableState<Boolean>,    imeAction: ImeAction = ImeAction.Done,    onAction: KeyboardActions = KeyboardActions.Default) {    val visualTransformation = if (passwordVisibility.value)        VisualTransformation.None    else        PasswordVisualTransformation()    OutlinedTextField(        value = passwordState.value,        onValueChange = {            passwordState.value = it        },        label = { Text(text = label) },        singleLine = true,        textStyle = TextStyle(            fontSize = 18.sp,            //color = MaterialTheme.colorScheme.onSurface        ),        modifier = modifier            .padding(bottom = 10.dp, start = 10.dp, end = 10.dp)            .fillMaxWidth(),        enabled = enabled,        keyboardOptions = KeyboardOptions(            keyboardType = KeyboardType.Password,            imeAction = imeAction        ),        visualTransformation = visualTransformation,        trailingIcon = {            PasswordVisibility(passwordVisibility = passwordVisibility)        },        keyboardActions = onAction    )}@Composablefun PasswordVisibility(passwordVisibility: MutableState<Boolean>) {    val visible = passwordVisibility.value    IconButton(onClick = {        passwordVisibility.value = !visible    }) {        Icons.Default.Close    }}@Composablefun FABContent(onTap: () -> Unit) {    FloatingActionButton(        onClick = { onTap() },        shape = RoundedCornerShape(50.dp),        containerColor = COLOR_APP_PRIMARY    ) {        Icon(            imageVector = Icons.Default.Add,            contentDescription = "Add a Book", tint = Color.White        )    }}@Composablefun BookRating(score: Double = 4.5) {    Surface(        modifier = Modifier            .height(70.dp)            .padding(4.dp),        shape = RoundedCornerShape(56.dp),        shadowElevation = 6.dp    ) {        Column(modifier = Modifier.padding(8.dp)) {            Icon(                imageVector = Icons.Filled.StarBorder,                contentDescription = "Start",                modifier = Modifier.fillMaxWidth()                //modifier = Modifier.padding(3.dp)            )            Text(                text = score.toString(),                style = MaterialTheme.typography.bodyMedium,                textAlign = TextAlign.Center,                modifier = Modifier.fillMaxWidth()            )        }    }}@OptIn(ExperimentalMaterial3Api::class)@Preview@Composablefun ListCard(    book: MBook = MBook(        "iwj928ht92h4",        "Runnig",        "Me",        "Hellow Compose"    ), onPressDetails: (String) -> Unit = {}) {    val context = LocalContext.current    val resources = context.resources    val displayMetrics = resources.displayMetrics    val screensWidth = displayMetrics.widthPixels / displayMetrics.density    val spacing = 10.dp    ElevatedCard(        shape = RoundedCornerShape(29.dp),        //colors =,        elevation = CardDefaults.elevatedCardElevation(defaultElevation = 4.dp),        modifier = Modifier            .padding(16.dp)            .height(242.dp)            .width(202.dp)            .clickable { onPressDetails.invoke(book.title.toString()) }    ) {        Column(            modifier = Modifier.width(screensWidth.dp - (spacing * 2)),            horizontalAlignment = Alignment.Start        ) {            Row(horizontalArrangement = Arrangement.Center) {                Image(                    painter = rememberAsyncImagePainter(model = "https://nttdata-solutions.com/wp-content/usermedia/userphoto/59.jpg"),                    contentDescription = "Book image",                    modifier = Modifier                        .height(140.dp)                        .width(100.dp)                        .padding(4.dp)                )                Spacer(modifier = Modifier.width(50.dp))                Column(                    modifier = Modifier.padding(top = 25.dp),                    verticalArrangement = Arrangement.Center,                    horizontalAlignment = Alignment.CenterHorizontally                ) {                    Icon(                        imageVector = Icons.Rounded.FavoriteBorder,                        contentDescription = "Favorite icon",                        modifier = Modifier.padding(bottom = 1.dp)                    )                    BookRating(score = 3.5)                }            }            Text(                text = book.title.toString(), modifier = Modifier.padding(start = 4.dp, top = 4.dp),                color = Color.Black,                fontWeight = FontWeight.Bold,                maxLines = 2,                overflow = TextOverflow.Ellipsis            )            Text(                text = book.authors.toString(),                modifier = Modifier.padding(start = 4.dp, top = 4.dp),                style = MaterialTheme.typography.bodySmall            )        }        Row(            modifier = Modifier.fillMaxSize(),            horizontalArrangement = Arrangement.End,            verticalAlignment = Alignment.Bottom        ) {            RoundedButton(label = "Reading...", radius = 70)        }    }}@Preview@Composablefun RoundedButton(    label: String = "Reading",    radius: Int = 29,    onPress: () -> Unit = {}) {    Surface(        modifier = Modifier.clip(            RoundedCornerShape(                bottomEndPercent = radius,                topStartPercent = radius            )        ),        color = COLOR_APP_PRIMARY.copy(alpha = 0.5f)    ) {        Column(            modifier = Modifier                .width(90.dp)                .heightIn(40.dp)                .clickable { onPress.invoke() },            verticalArrangement = Arrangement.Center,            horizontalAlignment = Alignment.CenterHorizontally        ) {            Text(                text = label,                style = TextStyle(color = Color.White, fontWeight = FontWeight.Bold)            )        }    }}@SuppressLint("ResourceType")@Composablefun ReaderAppBar(    title: String,    icon: ImageVector? = null,    showProfile: Boolean = true,    navController: NavController,    onBackArrowClicked: () -> Unit = {},) {    SmallTopAppBar(        title = {            Row(verticalAlignment = Alignment.CenterVertically) {                if (showProfile) {                    Icon(                        imageVector = Icons.Default.Favorite,                        contentDescription = "Logo Icon",                        modifier = Modifier                            .clip(RoundedCornerShape(12.dp))                            .scale(0.6f)                    )                }                if (icon != null) {                    Icon(                        imageVector = icon,                        contentDescription = "arrow back",                        tint = MaterialTheme.colorScheme.inversePrimary,                        modifier = Modifier.clickable {                            onBackArrowClicked.invoke()                        }                    )                }                Spacer(modifier = Modifier.width(40.dp))                Text(                    text = title,                    style = TextStyle(                        fontWeight = FontWeight.Bold,                        fontSize = 20.sp,                        color = MaterialTheme.colorScheme.inversePrimary                    )                )            }        },        actions = {            IconButton(onClick = {                FirebaseAuth.getInstance().signOut().run {                    navController.navigate(ReaderScreens.LoginScreen.name)                }            }) {                if (showProfile) Row() {                    Icon(                        imageVector = Icons.Default.Logout,                        contentDescription = "Logout",                        tint = MaterialTheme.colorScheme.inversePrimary                    )                } else Box(){}            }        },        )}@Composablefun TitleSection(    modifier: Modifier = Modifier,    label: String) {    Surface(modifier = modifier.padding(start = 5.dp, top = 1.dp)) {        Column() {            Text(                text = label,                style = TextStyle(                    fontWeight = FontWeight.Normal,                    fontSize = 20.sp,                    textAlign = TextAlign.Left                )            )        }    }}