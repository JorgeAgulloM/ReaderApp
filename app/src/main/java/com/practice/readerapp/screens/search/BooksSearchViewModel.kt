package com.practice.readerapp.screens.searchimport android.util.Logimport androidx.compose.runtime.MutableStateimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.setValueimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.practice.readerapp.data.DataOrExceptionimport com.practice.readerapp.data.Resourceimport com.practice.readerapp.model.Itemimport com.practice.readerapp.repository.BookRepositoryimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport java.security.cert.Extensionimport javax.inject.Inject@HiltViewModelclass BooksSearchViewModel @Inject constructor(private val repository: BookRepository): ViewModel() {    var list: List<Item> by mutableStateOf(listOf())    init {        loadBooks()        //searchBooks("android")    }    private fun loadBooks() {        searchBooks("android")    }    fun searchBooks(query: String) {        viewModelScope.launch(Dispatchers.Default) {            if (query.isEmpty()) return@launch            try {                when(val response = repository.getBooks(query)) {                    is Resource.Success -> {                        list = response.data!!                    }                    is Resource.Error -> {                        Log.d("searchBooks", "Error: ${response.toString()}")                    }                    else -> {                        Log.d("searchBooks", "Else: ${response.toString()}")                    }                }            } catch (exception: Exception) {                Log.e("searchBooks", "Error searching books", exception)            }        }    }/*    fun searchBooks(query: String) {        viewModelScope.launch {            if (query.isEmpty()) return@launch            listOfBooks.value.loading = true            listOfBooks.value = repository.getBooks(query)            Log.d("DATASEARCH", "searchBooks: ${listOfBooks.value.data.toString()}")            if (listOfBooks.value.data.toString().isNotEmpty())                listOfBooks.value.loading = false        }    }*/}