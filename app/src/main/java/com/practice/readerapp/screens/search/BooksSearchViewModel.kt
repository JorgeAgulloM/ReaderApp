package com.practice.readerapp.screens.searchimport android.util.Logimport androidx.compose.runtime.MutableStateimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.setValueimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.practice.readerapp.data.DataOrExceptionimport com.practice.readerapp.data.Resourceimport com.practice.readerapp.model.Itemimport com.practice.readerapp.repository.BookRepositoryimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport java.security.cert.Extensionimport javax.inject.Inject@HiltViewModelclass BooksSearchViewModel @Inject constructor(private val repository: BookRepository): ViewModel() {    var list: List<Item> by mutableStateOf(listOf())    var isloading: Boolean by mutableStateOf(true)    init {        loadBooks()        //searchBooks("android")    }    private fun loadBooks() {        searchBooks("android")    }    fun searchBooks(query: String) {        viewModelScope.launch(Dispatchers.Default) {            //isloading = true            if (query.isEmpty()) return@launch            try {                when(val response = repository.getBooks(query)) {                    is Resource.Success -> {                        list = response.data!!                        if (list.isNotEmpty()) isloading = false                    }                    is Resource.Error -> {                        isloading = false                        Log.d("searchBooks", "Error: ${response.toString()}")                    }                    else -> {                        isloading = false                        Log.d("searchBooks", "Else: ${response.toString()}")                    }                }            } catch (exception: Exception) {                isloading = false                Log.e("searchBooks", "Error searching books", exception)            }        }    }}