package com.practice.readerapp.screens.searchimport androidx.compose.foundation.Imageimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.text.KeyboardActionsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.*import androidx.compose.runtime.Composableimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.ExperimentalComposeUiApiimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.RectangleShapeimport androidx.compose.ui.platform.LocalSoftwareKeyboardControllerimport androidx.compose.ui.text.font.FontStyleimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavControllerimport coil.compose.rememberAsyncImagePainterimport com.practice.readerapp.components.InputFieldimport com.practice.readerapp.components.ReaderAppBarimport com.practice.readerapp.model.Itemimport com.practice.readerapp.model.MBookimport com.practice.readerapp.navigation.ReaderScreens@OptIn(ExperimentalMaterial3Api::class)@Composablefun SearchScreen(navController: NavController, viewModel: BooksSearchViewModel = hiltViewModel()) {    Scaffold(topBar = {        ReaderAppBar(            title = "Search Books",            icon = Icons.Default.ArrowBack,            navController = navController,            showProfile = false        ) {            navController.navigate(ReaderScreens.ReaderHomeScreen.name)            //navController.popBackStack()        }    }) {        Surface(modifier = Modifier.padding(top = it.calculateTopPadding())) {            Column {                SearchForm(                    modifier = Modifier                        .fillMaxWidth()                        .padding(8.dp),                    viewModel                ) { searchQuery ->                    viewModel.searchBooks(query = searchQuery)                }                Spacer(modifier = Modifier.height(8.dp))                BookList(navController = navController, viewModel)            }        }    }}@Composablefun BookList(navController: NavController, viewModel: BooksSearchViewModel = hiltViewModel()) {    val listOfBooks = viewModel.list    if (viewModel.isloading) {        Row(horizontalArrangement = Arrangement.SpaceAround) {            LinearProgressIndicator()            Text(text = "Loading...")        }    } else {        LazyColumn(            modifier = Modifier.fillMaxSize(),            contentPadding = PaddingValues(16.dp)        ) {            items(listOfBooks) { book ->                BookRow(book = book, navController = navController)            }        }    }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun BookRow(book: Item, navController: NavController) {    ElevatedCard(        modifier = Modifier            .clickable {                navController.navigate(ReaderScreens.DetailScreen.name + "/${book.id}")            }            .fillMaxWidth()            .height(100.dp)            .padding(8.dp),        shape = RectangleShape,        elevation = CardDefaults.elevatedCardElevation(defaultElevation = 7.dp)    ) {        Row(            modifier = Modifier.padding(8.dp),            verticalAlignment = Alignment.Top        ) {            val imageUrl: String = book.volumeInfo.imageLinks.thumbnail                .ifEmpty { "https://nttdata-solutions.com/wp-content/usermedia/userphoto/59.jpg" }            Image(                painter = rememberAsyncImagePainter(model = imageUrl),                contentDescription = "Book image",                modifier = Modifier                    .fillMaxHeight()                    .padding(end = 4.dp)            )            Column() {                Text(                    text = book.volumeInfo.title,                    overflow = TextOverflow.Ellipsis,                    style = MaterialTheme.typography.titleMedium                )                Text(                    text = "Author: ${book.volumeInfo.authors}",                    overflow = TextOverflow.Ellipsis,                    fontStyle = FontStyle.Italic,                    style = MaterialTheme.typography.titleSmall                )                Text(                    text = "Date: ${book.volumeInfo.publishedDate}",                    overflow = TextOverflow.Ellipsis,                    fontStyle = FontStyle.Italic,                    style = MaterialTheme.typography.bodySmall                )                Text(                    text = "${book.volumeInfo.categories}",                    overflow = TextOverflow.Ellipsis,                    fontStyle = FontStyle.Italic,                    style = MaterialTheme.typography.bodyLarge                )            }        }    }}@OptIn(ExperimentalComposeUiApi::class)@Composablefun SearchForm(    modifier: Modifier = Modifier,    viewModel: BooksSearchViewModel,    loading: Boolean = false,    hint: String = "Search Books",    onSearch: (String) -> Unit = {}) {    Column {        val searchQueryState = rememberSaveable { mutableStateOf("") }        val keyboardController = LocalSoftwareKeyboardController.current        val valid = remember(searchQueryState.value) {            searchQueryState.value.trim().isNotEmpty()        }        InputField(            valueState = searchQueryState,            labelId = "Search",            enabled = true,            onAction = KeyboardActions {                if (!valid) return@KeyboardActions                onSearch(searchQueryState.value.trim())                searchQueryState.value = ""                keyboardController?.hide()            })    }}