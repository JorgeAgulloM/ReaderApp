package com.practice.readerapp.screens.updateimport android.annotation.SuppressLintimport android.util.Logimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.*import androidx.compose.runtime.Composableimport androidx.compose.runtime.produceStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavControllerimport com.practice.readerapp.components.ReaderAppBarimport com.practice.readerapp.data.DataOrExceptionimport com.practice.readerapp.model.MBookimport com.practice.readerapp.screens.home.HomeScreenViewModel@OptIn(ExperimentalMaterial3Api::class)@Composablefun BookUpdateScreen(    navController: NavController,    bookItemId: String,    viewModel: HomeScreenViewModel = hiltViewModel()) {    Scaffold(topBar = {        ReaderAppBar(            title = "Update Book",            icon = Icons.Default.ArrowBack,            showProfile = false,            navController = navController        ){            navController.popBackStack()        }    }) {        val bookInfo = produceState<DataOrException<List<MBook>, Boolean, Exception>>(            initialValue = DataOrException(data = emptyList(), true, Exception(""))        ) {            value = viewModel.data.value        }.value        Surface(            modifier = Modifier                .fillMaxSize()                .padding(3.dp)        ) {            Column(                modifier = Modifier.padding(top = it.calculateTopPadding()),                verticalArrangement = Arrangement.Top,                horizontalAlignment = Alignment.CenterHorizontally            ) {                Log.d("INFO", "bookInfo.data.size: ${viewModel.data.value.data.toString()}")                if (bookInfo.loading == true) {                    LinearProgressIndicator()                    bookInfo.loading = false                } else {                    Text(text = viewModel.data.value.data?.get(0)?.title.toString())                }            }        }    }}