package com.practice.readerapp.screens.updateimport android.util.Logimport androidx.compose.foundation.Imageimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.*import androidx.compose.runtime.Composableimport androidx.compose.runtime.produceStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavControllerimport coil.compose.rememberAsyncImagePainterimport com.practice.readerapp.components.ReaderAppBarimport com.practice.readerapp.data.DataOrExceptionimport com.practice.readerapp.model.MBookimport com.practice.readerapp.screens.home.HomeScreenViewModel@OptIn(ExperimentalMaterial3Api::class)@Composablefun BookUpdateScreen(    navController: NavController,    bookItemId: String,    viewModel: HomeScreenViewModel = hiltViewModel()) {    Scaffold(topBar = {        ReaderAppBar(            title = "Update Book",            icon = Icons.Default.ArrowBack,            showProfile = false,            navController = navController        ) {            navController.popBackStack()        }    }) {        val bookInfo = produceState<DataOrException<List<MBook>, Boolean, Exception>>(            initialValue = DataOrException(data = emptyList(), true, Exception(""))        ) {            value = viewModel.data.value        }.value        Surface(            modifier = Modifier                .fillMaxSize()                .padding(3.dp)        ) {            Column(                modifier = Modifier.padding(top = it.calculateTopPadding()),                verticalArrangement = Arrangement.Top,                horizontalAlignment = Alignment.CenterHorizontally            ) {                Log.d("INFO", "bookInfo.data.size: ${viewModel.data.value.data.toString()}")                if (bookInfo.loading == true) {                    LinearProgressIndicator()                    bookInfo.loading = false                } else {                    Surface(                        modifier = Modifier                            .padding(2.dp)                            .fillMaxWidth(),                        shape = CircleShape,                        shadowElevation = 4.dp                    ) {                        ShowBookUpdate(bookInfo = viewModel.data.value, bookItemId = bookItemId)                    }                }            }        }    }}@Composablefun ShowBookUpdate(bookInfo: DataOrException<List<MBook>, Boolean, Exception>, bookItemId: String) {    Row() {        Spacer(modifier = Modifier.width(45.dp))        if (bookInfo.data != null) {            Column(modifier = Modifier.padding(4.dp), verticalArrangement = Arrangement.Center) {                CardListItem(book = bookInfo.data!!.first { mBook ->                    mBook.googleBookId == bookItemId                }, onPressDetails = {                    Log.d("INFO", "bookInfo.data.size: ${bookInfo.data.toString()}")                })            }        }    }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun CardListItem(book: MBook, onPressDetails: () -> Int) {    ElevatedCard(        modifier = Modifier            .padding(                start = 4.dp,                end = 4.dp,                top = 4.dp,                bottom = 8.dp            )            .clip(RoundedCornerShape(20.dp))            .clickable {            },        //elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),        colors = CardDefaults.cardColors(            containerColor = Color.Transparent,            contentColor = MaterialTheme.colorScheme.onSurface        )    ) {        Row(horizontalArrangement = Arrangement.Start) {            Image(                painter = rememberAsyncImagePainter(model = book.photoUrl.toString()),                contentDescription = "Book Cover",                modifier = Modifier                    .height(100.dp)                    .width(120.dp)                    .padding(4.dp)                    .clip(                        RoundedCornerShape(                            topStart = 120.dp,                            topEnd = 20.dp,                            bottomEnd = 0.dp,                            bottomStart = 0.dp,                        )                    )            )            Column {                Text(                    text = book.title.toString(),                    style = MaterialTheme.typography.titleSmall,                    modifier = Modifier                        .padding(start = 8.dp, end = 8.dp)                        .width(120.dp),                    fontWeight = FontWeight.SemiBold,                    maxLines = 2,                    overflow = TextOverflow.Ellipsis                )                Text(                    text = book.publishedDate.toString(),                    style = MaterialTheme.typography.bodyMedium,                    modifier = Modifier.padding(                        start = 8.dp,                        end = 8.dp,                        top = 0.dp,                        bottom = 8.dp                    ),                )                //Text(text = book.authors.toString(), style = MaterialTheme.typography.bodyLarge)                //Text(text = book.description.toString(), style = MaterialTheme.typography.bodyLarge)            }        }    }}