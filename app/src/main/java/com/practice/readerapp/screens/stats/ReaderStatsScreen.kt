package com.practice.readerapp.screens.statsimport androidx.compose.foundation.Imageimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material.icons.sharp.Personimport androidx.compose.material3.*import androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.RectangleShapeimport androidx.compose.ui.text.font.FontStyleimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavControllerimport coil.compose.rememberAsyncImagePainterimport com.google.firebase.auth.FirebaseAuthimport com.practice.readerapp.components.ReaderAppBarimport com.practice.readerapp.model.MBookimport com.practice.readerapp.screens.home.HomeScreenViewModelimport java.util.*@OptIn(ExperimentalMaterial3Api::class)@Composablefun ReaderStatsScreen(    navController: NavController,    viewModel: HomeScreenViewModel = hiltViewModel()) {    var books: List<MBook>    val currentUser = FirebaseAuth.getInstance().currentUser    Scaffold(        topBar = {            ReaderAppBar(                title = "Book Stats",                icon = Icons.Default.ArrowBack,                showProfile = false,                navController = navController            )        },    ) {        Surface(modifier = Modifier.padding(top = it.calculateTopPadding())) {            books = if (!viewModel.data.value.data.isNullOrEmpty()) {                viewModel.data.value.data!!.filter { mBook ->                    mBook.userId == currentUser?.uid                }            } else {                emptyList()            }            Column() {                Row() {                    Box(                        modifier = Modifier                            .size(45.dp)                            .padding(2.dp)                    ) {                        Icon(imageVector = Icons.Sharp.Person, contentDescription = "Icon person")                    }                    Text(                        text = "Hi, ${                            currentUser?.email.toString()                                .split("@")[0].uppercase(Locale.getDefault())                        }"                    )                }                ElevatedCard(                    modifier = Modifier                        .fillMaxWidth()                        .padding(8.dp),                    shape = CircleShape,                    elevation = CardDefaults.cardElevation(defaultElevation = 5.dp)                ) {                    val readBooksList: List<MBook> =                        if (!viewModel.data.value.data.isNullOrEmpty()) {                            books.filter { mBook ->                                (mBook.userId == currentUser?.uid) && mBook.finishedReading != null                            }                        } else {                            emptyList()                        }                    val readingBooks = books.filter { mBook ->                        mBook.startedReading != null && mBook.finishedReading == null                    }                    Column(                        modifier = Modifier.padding(start = 24.dp, top = 4.dp, bottom = 4.dp),                        horizontalAlignment = Alignment.Start                    ) {                        Text(                            text = "You're Stats",                            style = MaterialTheme.typography.titleLarge                        )                        Divider()                        Text(                            text = "You're reading: ${readingBooks.size} books",                            style = MaterialTheme.typography.titleSmall                        )                        Text(                            text = "You're read: ${readBooksList.size} books",                            style = MaterialTheme.typography.titleSmall                        )                    }                }                if (viewModel.data.value.loading == true) {                    LinearProgressIndicator()                } else {                    Divider()                    LazyColumn(                        modifier = Modifier                            .fillMaxSize(),                        contentPadding = PaddingValues(16.dp)                    ) {                        val readBooks: List<MBook> =                            if (!viewModel.data.value.data.isNullOrEmpty()) {                                viewModel.data.value.data!!.filter { mBook ->                                    (mBook.userId == currentUser?.uid) && mBook.finishedReading != null                                }                            } else {                                emptyList()                            }                        items(readBooks) { book ->                            BookRowStats(book = book)                        }                    }                }            }        }    }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun BookRowStats(book: MBook) {    ElevatedCard(        modifier = Modifier            .clickable {                //navController.navigate(ReaderScreens.DetailScreen.name + "/${book.id}")            }            .fillMaxWidth()            .height(100.dp)            .padding(8.dp),        shape = RectangleShape,        elevation = CardDefaults.elevatedCardElevation(defaultElevation = 7.dp)    ) {        Row(            modifier = Modifier.padding(8.dp),            verticalAlignment = Alignment.Top        ) {            val imageUrl: String = if (book.photoUrl.toString().isEmpty())                "https://nttdata-solutions.com/wp-content/usermedia/userphoto/59.jpg"            else                book.photoUrl.toString()            Image(                painter = rememberAsyncImagePainter(model = imageUrl),                contentDescription = "Book image",                modifier = Modifier                    .fillMaxHeight()                    .padding(end = 4.dp)            )            Column() {                Text(                    text = book.title.toString(),                    overflow = TextOverflow.Ellipsis,                    style = MaterialTheme.typography.titleMedium                )                Text(                    text = "Author: ${book.authors}",                    overflow = TextOverflow.Ellipsis,                    fontStyle = FontStyle.Italic,                    style = MaterialTheme.typography.titleSmall                )                Text(                    text = "Date: ${book.publishedDate}",                    overflow = TextOverflow.Ellipsis,                    fontStyle = FontStyle.Italic,                    style = MaterialTheme.typography.bodySmall                )                Text(                    text = "${book.categories}",                    overflow = TextOverflow.Ellipsis,                    fontStyle = FontStyle.Italic,                    style = MaterialTheme.typography.bodyLarge                )            }        }    }}