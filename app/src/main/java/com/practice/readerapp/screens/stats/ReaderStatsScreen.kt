package com.practice.readerapp.screens.statsimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.CircleShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material.icons.sharp.Paddingimport androidx.compose.material.icons.sharp.Percentimport androidx.compose.material.icons.sharp.Personimport androidx.compose.material3.*import androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavControllerimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.ktx.Firebaseimport com.practice.readerapp.components.ReaderAppBarimport com.practice.readerapp.model.MBookimport com.practice.readerapp.screens.home.HomeScreenViewModelimport java.util.*@OptIn(ExperimentalMaterial3Api::class)@Composablefun ReaderStatsScreen(    navController: NavController,    viewModel: HomeScreenViewModel = hiltViewModel()) {    var books: List<MBook>    val currentUser = FirebaseAuth.getInstance().currentUser    Scaffold(        topBar = {            ReaderAppBar(                title = "Book Stats",                icon = Icons.Default.ArrowBack,                showProfile = false,                navController = navController            )        },    ) {        Surface(modifier = Modifier.padding(top = it.calculateTopPadding())) {            books = if (!viewModel.data.value.data.isNullOrEmpty()) {                viewModel.data.value.data!!.filter { mBook ->                    mBook.userId == currentUser?.uid                }            } else {                emptyList()            }            Column() {                Row() {                    Box(                        modifier = Modifier                            //.size(45.dp)                            .padding(2.dp)                    ) {                        Icon(imageVector = Icons.Sharp.Person, contentDescription = "Icon person")                    }                    Text(                        text = "Hi, ${                            currentUser?.email.toString()                                .split("@")[0].uppercase(Locale.getDefault())                        }"                    )                }            }            ElevatedCard(                modifier = Modifier                    .fillMaxWidth()                    .padding(top = it.calculateTopPadding()),                shape = CircleShape,                elevation = CardDefaults.cardElevation(defaultElevation = 5.dp)            ) {                val readBooksList: List<MBook> = if (!viewModel.data.value.data.isNullOrEmpty()) {                    books.filter { mBook ->                        (mBook.userId == currentUser?.uid) && mBook.finishedReading != null                    }                } else {                    emptyList()                }                val readingBooks = books.filter { mBook ->                    mBook.startedReading != null && mBook.finishedReading == null                }                Column(                    modifier = Modifier.padding(start = 25.dp, top = 4.dp, bottom = 4.dp),                    horizontalAlignment = Alignment.Start                ) {                    Text(                        text = "You're Stats",                        style = MaterialTheme.typography.titleLarge                    )                    Divider()                    Text(                        text = "You're reading: ${readingBooks.size} books",                        style = MaterialTheme.typography.titleSmall                    )                    Text(                        text = "You're read: ${readBooksList.size} books",                        style = MaterialTheme.typography.titleSmall                    )                }            }        }    }}