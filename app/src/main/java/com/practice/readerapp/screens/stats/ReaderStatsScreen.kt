package com.practice.readerapp.screens.statsimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material.icons.sharp.Paddingimport androidx.compose.material.icons.sharp.Percentimport androidx.compose.material.icons.sharp.Personimport androidx.compose.material3.*import androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavControllerimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.ktx.Firebaseimport com.practice.readerapp.components.ReaderAppBarimport com.practice.readerapp.model.MBookimport com.practice.readerapp.screens.home.HomeScreenViewModelimport java.util.*@OptIn(ExperimentalMaterial3Api::class)@Composablefun ReaderStatsScreen(    navController: NavController,    viewModel: HomeScreenViewModel = hiltViewModel()) {    var books: List<MBook>    val currentUser = FirebaseAuth.getInstance().currentUser    Scaffold(        topBar = {            ReaderAppBar(                title = "Book Stats",                icon = Icons.Default.ArrowBack,                showProfile = false,                navController = navController            )        },    ) {        Surface(modifier = Modifier.padding(top = it.calculateTopPadding())) {            books = if (!viewModel.data.value.data.isNullOrEmpty()) {                viewModel.data.value.data!!.filter { mBook ->                    mBook.userId == currentUser?.uid                }            } else {                emptyList()            }            Column {                Box(                    modifier = Modifier                        .size(45.dp)                        .padding(2.dp)                ) {                    Icon(imageVector = Icons.Sharp.Person, contentDescription = "Icon person")                }                Text(                    text = "Hi, ${                        currentUser?.email.toString().split("@")[0].uppercase(Locale.getDefault())                    }"                )            }        }    }}