package com.practice.readerapp.screens.detailsimport android.util.Logimport androidx.compose.foundation.Imageimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.*import androidx.compose.runtime.Composableimport androidx.compose.runtime.produceStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.scaleimport androidx.compose.ui.graphics.RectangleShapeimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport androidx.hilt.navigation.compose.hiltViewModelimport androidx.navigation.NavControllerimport coil.compose.rememberAsyncImagePainterimport com.practice.readerapp.components.ReaderAppBarimport com.practice.readerapp.data.Resourceimport com.practice.readerapp.model.Itemimport com.practice.readerapp.navigation.ReaderScreens@OptIn(ExperimentalMaterial3Api::class)@Composablefun BookDetailsScreen(    navController: NavController,    bookId: String,    viewModel: DetailsViewModel = hiltViewModel()) {    Scaffold(topBar = {        ReaderAppBar(            title = "Book Details",            icon = Icons.Default.ArrowBack,            showProfile = false,            navController = navController        ) {            navController.navigate(ReaderScreens.SearchScreen.name)        }    }) {        Surface(            modifier = Modifier                .padding(top = it.calculateTopPadding(), start = 3.dp, end = 13.dp)                .fillMaxSize()        ) {            Column(                modifier = Modifier.padding(top = 12.dp),                verticalArrangement = Arrangement.Top,                horizontalAlignment = Alignment.CenterHorizontally            ) {                val bookInfo = produceState<Resource<Item>>(initialValue = Resource.Loading()) {                    value = viewModel.getBookInfo(bookId)                }.value                if (bookInfo.data == null)                    Row(horizontalArrangement = Arrangement.SpaceAround) {                        LinearProgressIndicator()                        Text(text = "Loading...")                    }                else                    ShowBookDetails(bookInfo, navController)            }        }    }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun ShowBookDetails(bookInfo: Resource<Item>, navController: NavController) {    val bookData = bookInfo.data?.volumeInfo    val googleBookId = bookInfo.data?.id    ElevatedCard(        modifier = Modifier.padding(34.dp),        shape = CircleShape,        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)    ) {        Image(            painter = rememberAsyncImagePainter(model = bookData!!.imageLinks.thumbnail),            contentDescription = "Cover of ${bookData.title}",            modifier = Modifier                .scale(1.45f)                .size(150.dp)                .padding(1.dp)        )    }    Text(        text = bookData?.title.toString(),        style = MaterialTheme.typography.titleLarge,        overflow = TextOverflow.Ellipsis,        maxLines = 19    )    Text(text = "Authors: ${bookData?.authors.toString()}")    Text(text = "Page Count: ${bookData?.pageCount.toString()}")    Text(        text = "Categories: ${bookData?.categories.toString()}",        style = MaterialTheme.typography.titleSmall    )    Text(        text = "Published Date: ${bookData?.publishedDate.toString()}",        style = MaterialTheme.typography.titleSmall    )    //Text(text = "Description: ${bookData?.description.toString()}")    //Text(text = "Language: ${bookData?.language.toString()}")    Spacer(modifier = Modifier.height(5.dp))}